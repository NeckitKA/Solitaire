//---------------------------------------------------------------------------

#pragma hdrstop

#include "Stock.h"
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
//---------------------------------------------------------------------------

Stock::Stock(int n, int x, int y, TForm* parentForm)
	: Stack(n, x, y, parentForm) {
	SetParentForm(parentForm);
	GetTImage()->OnMouseDown = OnMouseDown;
}
//---------------------------------------------------------------------------

void Stock::SetParentForm(TForm* form) {
	parentForm = form;
}
//---------------------------------------------------------------------------

TForm* Stock::GetParentForm() const {
	return parentForm;
}

void Stock::AddCard(Card* card) {
	cards.push_back(card);
}
//---------------------------------------------------------------------------

void Stock::RemoveCard() {
	cards.pop_back();
}
//---------------------------------------------------------------------------

void __fastcall Stock::OnMouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y) {
	TForm1* form = dynamic_cast<TForm1*>(GetParentForm());

	if (Button == mbLeft && cards.size()==0) {

		int numOfCards  = form->waste->cards.size();
		for (int cardNum = numOfCards - 1; cardNum >= 0; --cardNum) {
			form->waste->cards[cardNum]->SetCardOpen(false);
			form->waste->cards[cardNum]->
				SetCardPicture(form->waste->cards[cardNum]->GetValue(),
					form->waste->cards[cardNum]->GetCardOpen());
			form->waste->cards[cardNum]->SetParentStack(form->stock);
			form->waste->cards[cardNum]->BringToFront();
			AddCard(form->waste->cards[cardNum]);
			form->waste->RemoveCard(cardNum);
		}
	}

	else if (Button == mbRight) {

		Waste* waste = dynamic_cast<Waste*>(form->waste);
		if (!waste->cards.empty()) {
            if ((!form->foundationStacks[0]->cards.empty() && (waste->cards.back()->GetValue()-4)==form->foundationStacks[0]->cards.back()->GetValue()) || ((waste->cards.back()->GetValue())<5 && form->foundationStacks[0]->cards.size()==0)) {
				waste->cards.back()->SetParentStack(form->foundationStacks[0]);
				form->foundationStacks[0]->AddCard(waste->cards.back());
				waste->RemoveCard(waste->cards.size()-1);

			}

			else if ((!form->foundationStacks[1]->cards.empty() && (waste->cards.back()->GetValue()-4)==form->foundationStacks[1]->cards.back()->GetValue()) || ((waste->cards.back()->GetValue())<5 && form->foundationStacks[1]->cards.size()==0)) {
				waste->cards.back()->SetParentStack(form->foundationStacks[1]);
				form->foundationStacks[1]->AddCard(waste->cards.back());
				waste->RemoveCard(waste->cards.size()-1);

			}

			else if ((!form->foundationStacks[2]->cards.empty() && (waste->cards.back()->GetValue()-4)==form->foundationStacks[2]->cards.back()->GetValue()) || ((waste->cards.back()->GetValue())<5 && form->foundationStacks[2]->cards.size()==0)) {
				waste->cards.back()->SetParentStack(form->foundationStacks[2]);
				form->foundationStacks[2]->AddCard(waste->cards.back());
				waste->RemoveCard(waste->cards.size()-1);

			}

			else if ((!form->foundationStacks[3]->cards.empty() && (waste->cards.back()->GetValue()-4)==form->foundationStacks[3]->cards.back()->GetValue()) || ((waste->cards.back()->GetValue())<5 && form->foundationStacks[3]->cards.size()==0)) {
				waste->cards.back()->SetParentStack(form->foundationStacks[3]);
				form->foundationStacks[3]->AddCard(waste->cards.back());
				waste->RemoveCard(waste->cards.size()-1);

			}
		}
	}


}
//---------------------------------------------------------------------------
